#!/usr/bin/env python

import sys

colortable = (
    (0x0,  0x0,  0x0),  (0xcd, 0x0,  0x0),  (0x0,  0xcd, 0x0),  (0xcd, 0xcd, 0x0),
    (0x0,  0x0,  0xee), (0xcd, 0x0,  0xcd), (0x0,  0xcd, 0xcd), (0xe5, 0xe5, 0xe5),
    (0x7f, 0x7f, 0x7f), (0xff, 0x0,  0x0),  (0x0,  0xff, 0x0),  (0xff, 0xff, 0x0),
    (0x5c, 0x5c, 0xff), (0xff, 0x0,  0xff), (0x0,  0xff, 0xff), (0xff, 0xff, 0xff),
    (0x0,  0x0,  0x0),  (0x0,  0x0,  0x5f), (0x0,  0x0,  0x87), (0x0,  0x0,  0xaf),
    (0x0,  0x0,  0xd7), (0x0,  0x0,  0xff), (0x0,  0x5f, 0x0),  (0x0,  0x5f, 0x5f),
    (0x0,  0x5f, 0x87), (0x0,  0x5f, 0xaf), (0x0,  0x5f, 0xd7), (0x0,  0x5f, 0xff),
    (0x0,  0x87, 0x0),  (0x0,  0x87, 0x5f), (0x0,  0x87, 0x87), (0x0,  0x87, 0xaf),
    (0x0,  0x87, 0xd7), (0x0,  0x87, 0xff), (0x0,  0xaf, 0x0),  (0x0,  0xaf, 0x5f),
    (0x0,  0xaf, 0x87), (0x0,  0xaf, 0xaf), (0x0,  0xaf, 0xd7), (0x0,  0xaf, 0xff),
    (0x0,  0xd7, 0x0),  (0x0,  0xd7, 0x5f), (0x0,  0xd7, 0x87), (0x0,  0xd7, 0xaf),
    (0x0,  0xd7, 0xd7), (0x0,  0xd7, 0xff), (0x0,  0xff, 0x0),  (0x0,  0xff, 0x5f),
    (0x0,  0xff, 0x87), (0x0,  0xff, 0xaf), (0x0,  0xff, 0xd7), (0x0,  0xff, 0xff),
    (0x5f, 0x0,  0x0),  (0x5f, 0x0,  0x5f), (0x5f, 0x0,  0x87), (0x5f, 0x0,  0xaf),
    (0x5f, 0x0,  0xd7), (0x5f, 0x0,  0xff), (0x5f, 0x5f, 0x0),  (0x5f, 0x5f, 0x5f),
    (0x5f, 0x5f, 0x87), (0x5f, 0x5f, 0xaf), (0x5f, 0x5f, 0xd7), (0x5f, 0x5f, 0xff),
    (0x5f, 0x87, 0x0),  (0x5f, 0x87, 0x5f), (0x5f, 0x87, 0x87), (0x5f, 0x87, 0xaf),
    (0x5f, 0x87, 0xd7), (0x5f, 0x87, 0xff), (0x5f, 0xaf, 0x0),  (0x5f, 0xaf, 0x5f),
    (0x5f, 0xaf, 0x87), (0x5f, 0xaf, 0xaf), (0x5f, 0xaf, 0xd7), (0x5f, 0xaf, 0xff),
    (0x5f, 0xd7, 0x0),  (0x5f, 0xd7, 0x5f), (0x5f, 0xd7, 0x87), (0x5f, 0xd7, 0xaf),
    (0x5f, 0xd7, 0xd7), (0x5f, 0xd7, 0xff), (0x5f, 0xff, 0x0),  (0x5f, 0xff, 0x5f),
    (0x5f, 0xff, 0x87), (0x5f, 0xff, 0xaf), (0x5f, 0xff, 0xd7), (0x5f, 0xff, 0xff),
    (0x87, 0x0,  0x0),  (0x87, 0x0,  0x5f), (0x87, 0x0,  0x87), (0x87, 0x0,  0xaf),
    (0x87, 0x0,  0xd7), (0x87, 0x0,  0xff), (0x87, 0x5f, 0x0),  (0x87, 0x5f, 0x5f),
    (0x87, 0x5f, 0x87), (0x87, 0x5f, 0xaf), (0x87, 0x5f, 0xd7), (0x87, 0x5f, 0xff),
    (0x87, 0x87, 0x0),  (0x87, 0x87, 0x5f), (0x87, 0x87, 0x87), (0x87, 0x87, 0xaf),
    (0x87, 0x87, 0xd7), (0x87, 0x87, 0xff), (0x87, 0xaf, 0x0),  (0x87, 0xaf, 0x5f),
    (0x87, 0xaf, 0x87), (0x87, 0xaf, 0xaf), (0x87, 0xaf, 0xd7), (0x87, 0xaf, 0xff),
    (0x87, 0xd7, 0x0),  (0x87, 0xd7, 0x5f), (0x87, 0xd7, 0x87), (0x87, 0xd7, 0xaf),
    (0x87, 0xd7, 0xd7), (0x87, 0xd7, 0xff), (0x87, 0xff, 0x0),  (0x87, 0xff, 0x5f),
    (0x87, 0xff, 0x87), (0x87, 0xff, 0xaf), (0x87, 0xff, 0xd7), (0x87, 0xff, 0xff),
    (0xaf, 0x0,  0x0),  (0xaf, 0x0,  0x5f), (0xaf, 0x0,  0x87), (0xaf, 0x0,  0xaf),
    (0xaf, 0x0,  0xd7), (0xaf, 0x0,  0xff), (0xaf, 0x5f, 0x0),  (0xaf, 0x5f, 0x5f),
    (0xaf, 0x5f, 0x87), (0xaf, 0x5f, 0xaf), (0xaf, 0x5f, 0xd7), (0xaf, 0x5f, 0xff),
    (0xaf, 0x87, 0x0),  (0xaf, 0x87, 0x5f), (0xaf, 0x87, 0x87), (0xaf, 0x87, 0xaf),
    (0xaf, 0x87, 0xd7), (0xaf, 0x87, 0xff), (0xaf, 0xaf, 0x0),  (0xaf, 0xaf, 0x5f),
    (0xaf, 0xaf, 0x87), (0xaf, 0xaf, 0xaf), (0xaf, 0xaf, 0xd7), (0xaf, 0xaf, 0xff),
    (0xaf, 0xd7, 0x0),  (0xaf, 0xd7, 0x5f), (0xaf, 0xd7, 0x87), (0xaf, 0xd7, 0xaf),
    (0xaf, 0xd7, 0xd7), (0xaf, 0xd7, 0xff), (0xaf, 0xff, 0x0),  (0xaf, 0xff, 0x5f),
    (0xaf, 0xff, 0x87), (0xaf, 0xff, 0xaf), (0xaf, 0xff, 0xd7), (0xaf, 0xff, 0xff),
    (0xd7, 0x0,  0x0),  (0xd7, 0x0,  0x5f), (0xd7, 0x0,  0x87), (0xd7, 0x0,  0xaf),
    (0xd7, 0x0,  0xd7), (0xd7, 0x0,  0xff), (0xd7, 0x5f, 0x0),  (0xd7, 0x5f, 0x5f),
    (0xd7, 0x5f, 0x87), (0xd7, 0x5f, 0xaf), (0xd7, 0x5f, 0xd7), (0xd7, 0x5f, 0xff),
    (0xd7, 0x87, 0x0),  (0xd7, 0x87, 0x5f), (0xd7, 0x87, 0x87), (0xd7, 0x87, 0xaf),
    (0xd7, 0x87, 0xd7), (0xd7, 0x87, 0xff), (0xd7, 0xaf, 0x0),  (0xd7, 0xaf, 0x5f),
    (0xd7, 0xaf, 0x87), (0xd7, 0xaf, 0xaf), (0xd7, 0xaf, 0xd7), (0xd7, 0xaf, 0xff),
    (0xd7, 0xd7, 0x0),  (0xd7, 0xd7, 0x5f), (0xd7, 0xd7, 0x87), (0xd7, 0xd7, 0xaf),
    (0xd7, 0xd7, 0xd7), (0xd7, 0xd7, 0xff), (0xd7, 0xff, 0x0),  (0xd7, 0xff, 0x5f),
    (0xd7, 0xff, 0x87), (0xd7, 0xff, 0xaf), (0xd7, 0xff, 0xd7), (0xd7, 0xff, 0xff),
    (0xff, 0x0,  0x0),  (0xff, 0x0,  0x5f), (0xff, 0x0,  0x87), (0xff, 0x0,  0xaf),
    (0xff, 0x0,  0xd7), (0xff, 0x0,  0xff), (0xff, 0x5f, 0x0),  (0xff, 0x5f, 0x5f),
    (0xff, 0x5f, 0x87), (0xff, 0x5f, 0xaf), (0xff, 0x5f, 0xd7), (0xff, 0x5f, 0xff),
    (0xff, 0x87, 0x0),  (0xff, 0x87, 0x5f), (0xff, 0x87, 0x87), (0xff, 0x87, 0xaf),
    (0xff, 0x87, 0xd7), (0xff, 0x87, 0xff), (0xff, 0xaf, 0x0),  (0xff, 0xaf, 0x5f),
    (0xff, 0xaf, 0x87), (0xff, 0xaf, 0xaf), (0xff, 0xaf, 0xd7), (0xff, 0xaf, 0xff),
    (0xff, 0xd7, 0x0),  (0xff, 0xd7, 0x5f), (0xff, 0xd7, 0x87), (0xff, 0xd7, 0xaf),
    (0xff, 0xd7, 0xd7), (0xff, 0xd7, 0xff), (0xff, 0xff, 0x0),  (0xff, 0xff, 0x5f),
    (0xff, 0xff, 0x87), (0xff, 0xff, 0xaf), (0xff, 0xff, 0xd7), (0xff, 0xff, 0xff),
    (0x0,  0x0,  0x0),  (0x12, 0x12, 0x12), (0x1c, 0x1c, 0x1c), (0x26, 0x26, 0x26),
    (0x30, 0x30, 0x30), (0x3a, 0x3a, 0x3a), (0x44, 0x44, 0x44), (0x4e, 0x4e, 0x4e),
    (0x58, 0x58, 0x58), (0x62, 0x62, 0x62), (0x6c, 0x6c, 0x6c), (0x76, 0x76, 0x76),
    (0x80, 0x80, 0x80), (0x8a, 0x8a, 0x8a), (0x94, 0x94, 0x94), (0x9e, 0x9e, 0x9e),
    (0xa8, 0xa8, 0xa8), (0xb2, 0xb2, 0xb2), (0xbc, 0xbc, 0xbc), (0xc6, 0xc6, 0xc6),
    (0xd0, 0xd0, 0xd0)
)

def rgb2xterm(rgb):
    best_distance = float('inf')
    best_match = None
    for number, color in enumerate(colortable):
        distance = sum((x - y) ** 2 for x, y in zip(color, rgb))
        if distance < best_distance:
            best_distance = distance
            best_match = number

    return best_match

def parse_rgb(hex_color):
    if len(hex_color) != 6:
        raise ValueError('Invalid color! Must consist of 6 characters')
    return (
            int(hex_color[0:2], 16),
            int(hex_color[2:4], 16),
            int(hex_color[4:6], 16)
            )

def add_console_colors(line):
    indent = ''
    for char in line:
        if char != '\t' and char != ' ':
            break
        indent += char

    tokens = line.split()
    if not tokens:
        return line

    command = tokens[0].rstrip('!')
    if command != 'highlight'[:len(command)]:
        return line

    new_tokens = []
    for token in tokens:
        new_tokens.append(token)

        if token.startswith('guifg=#'):
            hex_color = token.partition('guifg=#')[2]
            closest = rgb2xterm(parse_rgb(hex_color))
            new_tokens.append('ctermfg=%d' % closest)

        elif token.startswith('guibg=#'):
            hex_color = token.partition('guibg=#')[2]
            closest = rgb2xterm(parse_rgb(hex_color))
            new_tokens.append('ctermbg=%d' % closest)

        elif token.startswith('gui='):
            option = token.partition('gui=')[2]
            new_tokens.append('cterm=' + option)

    return indent + ' '.join(new_tokens) + '\n'

def main():
    if len(sys.argv) < 3:
        print('usage: vcsc in.vim out.vim')
        exit(1)

    with open(sys.argv[1], 'r') as input, open(sys.argv[2], 'w') as output:
        output.writelines(map(add_console_colors, input))

if __name__ == '__main__':
    main()
